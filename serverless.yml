service: running-route-api
frameworkVersion: "3.38.0"

provider:
  name: aws
  runtime: python3.12
  region: ap-northeast-2
  memorySize: 512
  timeout: 15
  architecture: x86_64   # arm64도 가능. 이미지/네이티브 확장 없으면 arm64가 저렴.
  environment:
    # 환경변수 설정
    KAKAO_REST_API_KEY: ${env:KAKAO_REST_API_KEY}
    ENVIRONMENT: production
  httpApi:
    cors:
      allowedOrigins:
        - https://www.run2style.com
        - https://run2style.com
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Requested-With
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowCredentials: true


  iam:
    role:
      statements:
        # SSM SecureString 읽기 (위 environment에서 ssm 참조 시 필요)
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource: arn:aws:ssm:${self:provider.region}:*:parameter/rrR/*
        # (SecureString일 경우 KMS 복호화가 필요할 수 있음)
        - Effect: Allow
          Action:
            - kms:Decrypt
          Resource: "*"

functions:
  api:
    handler: main.handler
    events:
      - httpApi:
          method: ANY
          path: /
      - httpApi:
          method: ANY
          path: /{proxy+}
    # 보안 설정
    #reservedConcurrency: 10  # 동시 실행 제한

package:
  # 서비스 단위 패키징. 포함/제외 패턴 지정
  patterns:
    - "**"                 # 모든 파일 포함
    - "!node_modules/**"   # node_modules 제외
    - "!.git/**"           # .git 제외
    - "!*.md"              # 마크다운 파일 제외

plugins:
  - serverless-python-requirements

resources:
  Resources:
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        MessageRetentionPeriod: 1209600  # 14일

custom:
  pythonRequirements:
    # 핵심: Lambda와 동일한 리눅스 환경에서 빌드 (GitHub Actions 러너에 Docker 있음)
    dockerizePip: true
    # requirements.txt 경로 지정
    fileName: requirements.txt
    # 배포 크기 줄이기 (소스/휠 중 불필요한 것 제거)
    slim: true
    # Python 버전 지정(선택): 러너 기본 python이 낮을 때 유용
    pythonBin: python3
